************************************************
接口描述
************************************************

.. contents:: 目录

1. 查询系统信息
========================================

1.1. 查询版本号
----------------------------------------

(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

查询软件当前版本号

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/version

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+



(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    headers = {'Content-type': 'application/json'}


(5)返回数据说明(Content-type:JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| version       | 是                  | String        |软件版本信息                                            |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block::

    {
    "err_code":0, 
    "version":"V1.0.0", 
    }


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/version'
    headers = {'Content-type': 'application/json'}

    response = requests.get(url=url, headers=headers)
    print(json.loads(response.text))


1.2. 查询license激活状态
----------------------------------------

(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

查询license激活状态

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/license

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+


(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    headers = {'Content-type': 'application/json'}


(5)返回数据说明(Content-type: JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| status        | 是                  | String        | License激活状态信息                                    |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
    "err_code":0,
    "status":"Authorized",
    }


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/license'
    headers = {'Content-type': 'application/json'}

    response = requests.get(url=url, headers=headers)
    print(json.loads(response.text))




2. 人脸特征库管理
========================================

2.1. 新建特征库
----------------------------------------

(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

创建一个人脸的集合，用于存储人脸特征，最多不超过30个

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/create/collection

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+

请求体（Content-Type:JSON）

+-----------------+--------------+--------------+----------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                   |
+=================+==============+==============+========================================+
| collection_name | 是           | String       |人脸集合的名字                          |
+-----------------+--------------+--------------+----------------------------------------+


(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name":"face_col",
    }


(5)返回数据说明(Content-type:JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| status        | 是                  | String        |状态信息                                                |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {'err_code': 0, 'status': 'Create collection successfully!'}


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/create/collection'
    headers = {'Content-type': 'application/json'}
    resq = {
        'collection_name': 'face_col'
    }
    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))



2.2. 清空特征库
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

清空特定一个特征库的所有人脸特征

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/clear/collection

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+

请求体（Content-Type:JSON）

+-----------------+--------------+--------------+----------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                   |
+=================+==============+==============+========================================+
| collection_name | 是           | String       |人脸集合的名字                          |
+-----------------+--------------+--------------+----------------------------------------+


(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name":"face_col",
    }

(5)返回数据说明(Content-type: JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| status        | 是                  | String        | 状态信息                                               |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "err_code":0,
        "status":"Clear collection successfully!",
    }


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/clear/collection'
    headers = {'Content-type': 'application/json'}
    resq = {
        'collection_name': 'face_col'
    }
    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))



2.3. 删除特征库
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

删除特定一个特征库并清空其所有人脸特征

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/delete/collection

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+

请求体（Content-Type:JSON）

+-----------------+--------------+--------------+----------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                   |
+=================+==============+==============+========================================+
| collection_name | 是           | String       |人脸集合的名字                          |
+-----------------+--------------+--------------+----------------------------------------+



(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name":"face_col",
    }

(5)返回数据说明(Content-type: JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| status        | 是                  | String        | 状态信息                                               |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "err_code":0,
        "status": "Delete collection successfully!"
    }


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/delete/collection'
    headers = {'Content-type': 'application/json'}
    resq = {
        'collection_name': 'face_col'
    }
    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))


2.4. 查看特征库信息
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

查看一个或多个特征库名称已存储特征数量、创建日期、最近一次更新时间

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/collection/status

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+

请求体（Content-Type:JSON）

+-----------------+--------------+--------------+-----------------------------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                                      |
+=================+==============+==============+===========================================================+
| collection_name | 是           | list[string] | 人脸集合的名字列表，为[]时,返回所有已创建的人脸集合名字   |
+-----------------+--------------+--------------+-----------------------------------------------------------+



(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name":["face_col","face_col1"],
    }

(5)返回数据说明(Content-type: JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------------------+---------------------+---------------+--------------------------------------------------------+
| 字段名                    | 是否必选            | 数据类型      | 说明                                                   |
+===========================+=====================+===============+========================================================+
| err_code                  | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------------------+---------------------+---------------+--------------------------------------------------------+
| status                    | 是                  | Json          |状态信息                                                |
+---------------------------+---------------------+---------------+--------------------------------------------------------+
| status[i].collection_name | 是                  | string        |人脸集合的名字                                          |
+---------------------------+---------------------+---------------+--------------------------------------------------------+
| status[i].create_time     | 是                  | string        |创建时间                                                |
+---------------------------+---------------------+---------------+--------------------------------------------------------+
| status[i].update_time     | 是                  | string        |最近更新时间                                            |
+---------------------------+---------------------+---------------+--------------------------------------------------------+
| status[i].feature_num     | 是                  | int           |人脸特征数                                              |
+---------------------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
      'err_code': 0,
      'status': [
        {
          'collection_name': 'face_col',
          'create_time': 'Tue Jun 22 15:55:43 2021',
          'feature_num': 0,
          'update_time': 'Tue Jun 22 15:55:43 2021'
        }
      ]
    }



(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json

    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/collection/status'
    headers = {'Content-type': 'application/json'}

    resq = {
        'collection_name': ['face_col']
    }
    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))




3. 人脸特征管理
========================================

3.1. 添加人脸特征
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

提取人脸图像中的特征向量，并将其添加到指定特征库。一个人(target_id)可以关联多个人脸特征，最多不超过5个。

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/insert

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+


请求体（Content-Type:JSON）

+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                                                                                                                        |
+=================+==============+==============+=============================================================================================================================================+
| collection_name | 是           | String       |人脸集合的名字                                                                                                                               |
+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| face_image      | 是           | list[string] |人脸图像，base64编码,可包含多张图像                                                                                                          |
+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| target_id       | 是           | list[string] | 人脸标识列表，可包含多个标识，数据位置与face_image对应，同一个target_id关联多个人脸时,需要在对应位置使用同一target_id，格式如正确请求示例   |
+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+


(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name": "face_col",
        "face_image": [image_base64_str, image_base64_str1, image_base64_str2],
        "target_id": ["dmai", "dmai", "dmai1"]
    }


(5)返回数据说明(Content-type:JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| 字段名                        | 是否必选            | 数据类型      | 说明                                                   |
+===============================+=====================+===============+========================================================+
| err_code                      | 是                  | int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid                       | 是                  | json          | 无效数据字段                                           |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.invalid_num           | 是                  | int           | 无效数据数量                                           |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.message               | 是                  | json          | 无效数据信息                                           |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.message.invalid_id    | 是                  | list[string]  | 无效数据id                                             |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.message.invalid_index | 是                  | list[int]     | 无效数据index                                          |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| quota_exceeded_target_id      | 是                  | list[string]  | 特征关联数超过5的id                                    |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| status                        | 是                  | string        | 状态信息                                               |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| success_num                   | 是                  | int           | 本批次成功导入数量                                     |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block::

    {
      'err_code': 0,
      'invalid': {
        'invalid_num': 0,
        'message': {
          'invalid_id': [],
          'invalid_index': []
        }
      },
      'quota_exceeded_target_id': [],
      'status': 'Add vectors successfully!',
      'success_num': 1
    }

(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    import base64

    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/insert'
    headers = {'Content-type': 'application/json'}
    image_path = 'test1.jpg'
    with open(image_path, 'rb') as image_file:
        image_bytes = image_file.read()
        image_base64 = base64.b64encode(image_bytes)
        image_base64_str = image_base64.decode('utf-8')

    resq = {
        'collection_name': 'face_col',
        'face_image': [image_base64_str],
        'target_id': ['huge'],
    }

    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))



3.2. 更新人脸特征
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

提取人脸图像中的特征向量，并将其替换指定特征库中对应target_id的特征，该target_id原有的特征向量会被删除！一个人(target_id)可以关联多个人脸特征，最多不超过5个。

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/update

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+


请求体（Content-Type:JSON）

+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                                                                                                                        |
+=================+==============+==============+=============================================================================================================================================+
| collection_name | 是           | String       |人脸集合的名字                                                                                                                               |
+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| face_image      | 是           | list[string] |人脸图像，base64编码,可包含多张图像                                                                                                          |
+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| target_id       | 是           | list[string] | 人脸标识列表，可包含多个标识，数据位置与face_image对应，同一个target_id关联多个人脸时,需要在对应位置使用同一target_id，格式如正确请求示例   |
+-----------------+--------------+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+



(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name": "face_col",
        "face_image": [image_base64_str, image_base64_str1, image_base64_str2],
        "target_id": ["dmai", "dmai", "dmai1"]
    }


(5)返回数据说明(Content-type:JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| 字段名                        | 是否必选            | 数据类型      | 说明                                                   |
+===============================+=====================+===============+========================================================+
| err_code                      | 是                  | int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid                       | 是                  | json          |无效数据字段                                            |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.invalid_num           | 是                  | int           |无效数据数量                                            |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.message               | 是                  | json          |无效数据信息                                            |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.message.invalid_id    | 是                  | list[string]  |无效数据id                                              |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| invalid.message.invalid_index | 是                  | list[int]     |无效数据index                                           |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| quota_exceeded_target_id      | 是                  | list[string]  |特征关联数超过5的id                                     |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| target_invalid                | 是                  | list[string]  |特征库中不存在的target_id                               |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| status                        | 是                  | string        |状态信息                                                |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+
| success_num                   | 是                  | int           |本批次成功导入数量                                      |
+-------------------------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block::

    {
      'err_code': 0,
      'invalid': {
        'invalid_num': 0,
        'message': {
          'invalid_id': [],
          'invalid_index': []
        }
      },
      'quota_exceeded_target_id': [],
      'status': 'Update vectors successfully!',
      'success_num': 1,
      'target_invalid': []
    }



(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    import base64

    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/update'
    headers = {'Content-type': 'application/json'}
    image_path = 'test2.jpg'
    with open(image_path, 'rb') as image_file:
        image_bytes = image_file.read()
        image_base64 = base64.b64encode(image_bytes)
        image_base64_str = image_base64.decode('utf-8')

    resq = {
        'collection_name': 'face_col',
        'face_image': [image_base64_str],
        'target_id': ['huge'],
    }

    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))



3.3. 删除人脸特征
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

删除特定一个特征库中特定一个人（target_id)及其所有特征向量

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/delete/id

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       | 数据提交方式，值：'application/json'   |
+--------------+--------------+--------------+----------------------------------------+


请求体（Content-Type:JSON）

+-----------------+--------------+--------------+---------------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                        |
+=================+==============+==============+=============================================+
| collection_name | 是           | string       | 人脸集合的名字                              |
+-----------------+--------------+--------------+---------------------------------------------+
| target_id       | 是           | string       | 需要删除人脸的id标识                        |
+-----------------+--------------+--------------+---------------------------------------------+


(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name": "face_col",
        "target_id": "huge"
    }

(5)返回数据说明(Content-type: JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| status        | 是                  | string        | 状态信息                                               |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {'err_code': 0, 'status': 'Delete target_id successfully!'}


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json

    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/delete/id'
    headers = {'Content-type': 'application/json'}
    resq = {
        'collection_name': 'face_col',
        'target_id': "huge"
    }
    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))



4. 人脸图片搜索与比对
========================================

4.1. 人脸图片搜索
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在指定一个特征库中，搜索待检图像，并按相似度得分从高到低排序返回,最多返回100个。可以通过top_k字段过滤返回结果数量。

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/search

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+

请求体（Content-Type:JSON）

+-----------------+--------------+--------------+----------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                   |
+=================+==============+==============+========================================+
| collection_name | 是           | String       |人脸集合的名字                          |
+-----------------+--------------+--------------+----------------------------------------+
| face_image      | 是           | String       |人脸图像，base64编码                    |
+-----------------+--------------+--------------+----------------------------------------+
| top_k           | 是           | int          |相似度最高的k个结果                     |
+-----------------+--------------+--------------+----------------------------------------+

(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "collection_name":"face_col",
        "face_image":image_base64_str,
        "top_k":1,
    }


(5)返回数据说明(Content-type:JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+------------------+---------------------+---------------+--------------------------------------------------------+
| 字段名           | 是否必选            | 数据类型      | 说明                                                   |
+==================+=====================+===============+========================================================+
| err_code         | 是                  | int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+------------------+---------------------+---------------+--------------------------------------------------------+
| status           | 是                  | json          |状态信息                                                |
+------------------+---------------------+---------------+--------------------------------------------------------+
| status[i].result | 是                  | string        |搜索结果                                                |
+------------------+---------------------+---------------+--------------------------------------------------------+
| status[i].score  | 是                  | float         |结果置信度                                              |
+------------------+---------------------+---------------+--------------------------------------------------------+

(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block::

    {
        'err_code': 0,
        'status': [{'result': 'huge', 'score': 0.9997965730219448}]}
    }


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    import base64

    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/search'
    headers = {'Content-type': 'application/json'}
    image_path = 'test2.jpg'

    with open(image_path, 'rb') as image_file:
        image_bytes = image_file.read()
        image_base64 = base64.b64encode(image_bytes)
        image_base64_str = image_base64.decode('utf-8')

    resq = {
        'collection_name': 'face_col',
        'face_image': image_base64_str,
        'top_k': 1,
    }
    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))


4.2. 人脸验证
----------------------------------------


(1)接口功能
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

比对两张人脸图像的相似性，返回相似度得分，得分范围0-1.000。

(2)请求方式
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

GET  http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/compare

(3)请求参数说明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

请求头部(HTTP Header)

+--------------+--------------+--------------+----------------------------------------+
|    字段名    |   是否必选   |   数据类型   | 描述                                   |
+==============+==============+==============+========================================+
| Content-Type | 是           | String       |数据提交方式，值：'application/json'    |
+--------------+--------------+--------------+----------------------------------------+

请求体（Content-Type:JSON）

+-----------------+--------------+--------------+----------------------------------------+
|    字段名       |   是否必选   |   数据类型   | 描述                                   |
+=================+==============+==============+========================================+
| face_image1     | 是           | String       |base64编码                              |
+-----------------+--------------+--------------+----------------------------------------+
| face_image2     | 是           | String       |base64编码                              |
+-----------------+--------------+--------------+----------------------------------------+


(4)正确请求示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        "face_image1": image_base64_str1,
        "face_image2": image_base64_str2,
    }

(5)返回数据说明(Content-type: JSON)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


+---------------+---------------------+---------------+--------------------------------------------------------+
| 字段名        | 是否必选            | 数据类型      | 说明                                                   |
+===============+=====================+===============+========================================================+
| err_code      | 是                  | Int           | err_code为0时，业务正常，err_code不为0时，业务出错。   |
+---------------+---------------------+---------------+--------------------------------------------------------+
| score         | 是                  | float         | 比对目标为同一人的置信度                               |
+---------------+---------------------+---------------+--------------------------------------------------------+


(6)正确返回示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block::

    {
        'err_code': 0,
        'score': 0.9952978500038984
    }


(7)请求示例代码(Python)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

    # -*- coding:utf-8 -*-
    import requests
    import json
    import base64

    url = 'http://daipops-engine-reco-comp-daipops.test.dm-ai.cn/api/v1/engine/recocomp/face/compare'
    headers = {'Content-type': 'application/json'}
    image_path1 = 'test1.jpg'
    image_path2 = 'test2.jpg'
    with open(image_path1, 'rb') as image_file1:
        image_bytes1 = image_file1.read()
        image_base641 = base64.b64encode(image_bytes1)
        image_base64_str1 = image_base641.decode('utf-8')
    with open(image_path2, 'rb') as image_file:
        image_bytes = image_file.read()
        image_base64 = base64.b64encode(image_bytes)
        image_base64_str2 = image_base64.decode('utf-8')

    resq = {
        'face_image1': image_base64_str1,
        'face_image2': image_base64_str2,
    }

    response = requests.post(url=url, data=json.dumps(resq), headers=headers)
    print(json.loads(response.text))



5. 系统返回码
========================================

成功情况下，状态码为0的为正常返回，其消息体如下：

.. code-block::

    {
    "err_code": 0,
    ……
    }

失败情况下，状态码为10xx或500，其消息体如下：

.. code-block::

    {
    "err_code": 10xx,
    ……
    }

系统错误码详情：

+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 错误码        |错误信息                       | 错误说明        | 可能原因                      | 处理建议                        |
+===============+===============================+=================+===============================+=================================+
| 1001          | Database error                | 数据库错误      | 数据库未启动                  | 检查数据库状态                  |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1002          | Collection quota exceeded     | 人脸特征库超限  | 人脸特征库数量超过限制        | 删除无用的人脸特征库            |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1003          | Invalid collection name       | 无效的特征库名  | 特征库名不符合命名规则        | 请检查特征库名                  |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1004          | Collection already exists     | 人脸特征库存在  | 特征库已经存在                | 更换特征库名重新创建            |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1005          | Please check collection name  | 请检查特征库名  | 特征库不存在                  | 更换特征库名查询                |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1006          | Collection does not exist     | 特征库不存在    | 未创建特征库                  | 请先创建特征库                  |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1007          | Target_id quota exceeded      | taregt_id超限   | target_id关联feature数量大于5 | 删除target_id原关联feature      |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+
| 1008          | Update vectors unsuccessfully | 特征更新失败    | 后台程序异常                  | 重启后台服务                    |
+---------------+-------------------------------+-----------------+-------------------------------+---------------------------------+



